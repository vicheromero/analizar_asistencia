/**
 * Script para reorganizar registros de marcaciones
 * Toma los datos de la hoja activa y crea nuevas hojas con las marcaciones organizadas
 * y un resumen de asistencia por empleado
 */
function reorganizarMarcaciones() {
  // Obtener la hoja de cálculo activa
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const hojaOriginal = ss.getActiveSheet();
 
  // Comprobar si las hojas de resultados ya existen y eliminarlas
  let hojaResultados = ss.getSheetByName("Marcaciones Reorganizadas");
  if (hojaResultados) {
    ss.deleteSheet(hojaResultados);
  }
 
  let hojaResumen = ss.getSheetByName("Resumen de Asistencia");
  if (hojaResumen) {
    ss.deleteSheet(hojaResumen);
  }
 
  // Crear nuevas hojas para los datos reorganizados y el resumen
  hojaResultados = ss.insertSheet("Marcaciones Reorganizadas");
  hojaResumen = ss.insertSheet("Resumen de Asistencia");
 
  // Obtener los datos de la hoja original
  const datos = hojaOriginal.getDataRange().getValues();
  const encabezados = datos[0]; // Primera fila con encabezados
 
  // Crear el encabezado para la nueva hoja de marcaciones
  const nuevosEncabezados = ["Nombre y Apellido", "Fecha", "Ingreso", "H. Ingreso", "H. Tolerancia", "Atraso",
                           "Salida", "Inicio descanso", "T. Almuerzo", "Fin descanso", "Día laborado"];
  hojaResultados.getRange(1, 1, 1, nuevosEncabezados.length).setValues([nuevosEncabezados]);
 
  // Objeto para almacenar temporalmente las marcaciones por persona y fecha
  const marcacionesPorPersonaFecha = {};
 
  // Procesar los datos y organizarlos por persona y fecha
  for (let i = 1; i < datos.length; i++) { // Empezar desde 1 para saltar encabezados
    const fila = datos[i];
   
    // Obtener los valores necesarios
    const nombreApellido = fila[encabezados.indexOf("Nombre y Apellido")];
    const fecha = fila[encabezados.indexOf("Fecha")];
    const tipoRegistro = fila[encabezados.indexOf("Tipo de Registro")];
    const hora = fila[encabezados.indexOf("Hora")];
   
    // Crear una clave única para cada combinación de persona y fecha
    const clave = `${nombreApellido}_${fecha}`;
   
    // Si no existe la entrada para esta persona y fecha, crearla
    if (!marcacionesPorPersonaFecha[clave]) {
      marcacionesPorPersonaFecha[clave] = {
        nombreApellido: nombreApellido,
        fecha: fecha,
        ingreso: "",
        salida: "",
        inicioDescanso: "",
        finDescanso: ""
      };
    }
   
    // Asignar el valor de hora según el tipo de registro
    switch (tipoRegistro) {
      case "Ingreso":
        marcacionesPorPersonaFecha[clave].ingreso = hora;
        break;
      case "Salida":
        marcacionesPorPersonaFecha[clave].salida = hora;
        break;
      case "Inicio descanso":
        marcacionesPorPersonaFecha[clave].inicioDescanso = hora;
        break;
      case "Fin descanso":
        marcacionesPorPersonaFecha[clave].finDescanso = hora;
        break;
    }
  }
 
  // Convertir el objeto a un array para escribirlo en la hoja
  const datosReorganizados = [];
  for (let clave in marcacionesPorPersonaFecha) {
    const registro = marcacionesPorPersonaFecha[clave];
    // Añadimos valores vacíos para las nuevas columnas (se rellenarán después con fórmulas)
    datosReorganizados.push([
      registro.nombreApellido,
      registro.fecha,
      registro.ingreso,
      "", // H. Ingreso (se llenará después)
      "", // H. Tolerancia (se llenará después)
      "", // Atraso (se llenará con fórmula)
      registro.salida,
      registro.inicioDescanso,
      "", // T. Almuerzo (se llenará con fórmula)
      registro.finDescanso,
      "" // Día laborado (se llenará con fórmula)
    ]);
  }
 
  // Ordenar por nombre y fecha
  datosReorganizados.sort((a, b) => {
    // Primero ordenar por nombre
    if (a[0] < b[0]) return -1;
    if (a[0] > b[0]) return 1;
   
    // Si el nombre es igual, ordenar por fecha
    const fechaA = new Date(a[1]);
    const fechaB = new Date(b[1]);
    return fechaA - fechaB;
  });
 
  // Escribir los datos reorganizados en la nueva hoja
  if (datosReorganizados.length > 0) {
    hojaResultados.getRange(2, 1, datosReorganizados.length, 11).setValues(datosReorganizados);
  }
 
  // Dar formato a la nueva hoja de marcaciones
  hojaResultados.getRange(1, 1, 1, nuevosEncabezados.length).setFontWeight("bold");
 
  const filas = datosReorganizados.length;
  if (filas > 0) {
    // Aplicar formato de fecha
    const rangoFechas = hojaResultados.getRange(2, 2, filas, 1);
    rangoFechas.setNumberFormat("dd/MM/yyyy");
   
    // Aplicar formato de hora a todas las columnas de hora
    const columnasHora = [3, 4, 5, 6, 7, 8, 9, 10]; // Columnas con horas
    for (const columna of columnasHora) {
      hojaResultados.getRange(2, columna, filas, 1).setNumberFormat("HH:mm:ss");
    }
   
    // Establecer valores fijos para H. Ingreso y H. Tolerancia
    const rangoHoraIngreso = hojaResultados.getRange(2, 4, filas, 1);
    rangoHoraIngreso.setValue("08:00:00");
   
    const rangoHoraTolerancia = hojaResultados.getRange(2, 5, filas, 1);
    rangoHoraTolerancia.setValue("08:10:00");
   
    // Añadir fórmulas para todas las columnas calculadas
    for (let i = 2; i <= filas + 1; i++) {
      // Fórmula para Atrasos
      const celdaAtraso = hojaResultados.getRange(i, 6);
      celdaAtraso.setFormula(`=IF(C${i}>TIME(8,0,59),C${i}-D${i},"")`);
     
      // Fórmula para Tiempo de Almuerzo
      const celdaAlmuerzo = hojaResultados.getRange(i, 9);
      celdaAlmuerzo.setFormula(`=IF(AND(G${i}<>"",H${i}<>""),H${i}-G${i},"Falta marcación")`);
     
      // Fórmula para Día laborado
      const celdaDiaLaborado = hojaResultados.getRange(i, 11);
      celdaDiaLaborado.setFormula(`=IF(AND(C${i}<>"",J${i}<>""),1,0)`);
     
      // Fórmulas para marcar celdas vacías con "Falta marcación"
      const celdaIngreso = hojaResultados.getRange(i, 3);
      if (celdaIngreso.getValue() === "") {
        celdaIngreso.setValue("Falta marcación");
      }
     
      const celdaFinDescanso = hojaResultados.getRange(i, 10);
      if (celdaFinDescanso.getValue() === "") {
        celdaFinDescanso.setValue("Falta marcación");
      }
    }
   
    // Crear reglas de formato condicional
    let reglas = hojaResultados.getConditionalFormatRules();
   
    // 1. Formato condicional para atrasos
    const rangoAtrasos = hojaResultados.getRange(2, 6, filas, 1);
   
    const reglaAtraso1 = SpreadsheetApp.newConditionalFormatRule()
      .whenNumberGreaterThan(0.00694) // 10 minutos
      .setBackground("#FF0000") // Rojo
      .setRanges([rangoAtrasos])
      .build();
     
    const reglaAtraso2 = SpreadsheetApp.newConditionalFormatRule()
      .whenNumberBetween(0.000001, 0.00694) // Entre 0+ y 10 minutos
      .setBackground("#FFFF00") // Amarillo
      .setRanges([rangoAtrasos])
      .build();
   
    // 2. Formato condicional para tiempo de almuerzo
    const rangoAlmuerzo = hojaResultados.getRange(2, 9, filas, 1);
   
    const reglaAlmuerzo = SpreadsheetApp.newConditionalFormatRule()
      .whenNumberGreaterThan(0.041667) // 60 minutos
      .setBackground("#FFFF00") // Amarillo
      .setRanges([rangoAlmuerzo])
      .build();
   
    // 3. Formato condicional para celdas con "Falta marcación"
    const rangoIngreso = hojaResultados.getRange(2, 3, filas, 1);
    const rangoFinDescanso = hojaResultados.getRange(2, 10, filas, 1);
   
    const reglaFaltaMarcacion1 = SpreadsheetApp.newConditionalFormatRule()
      .whenTextEqualTo("Falta marcación")
      .setBackground("#FF0000") // Rojo
      .setRanges([rangoIngreso])
      .build();
     
    const reglaFaltaMarcacion2 = SpreadsheetApp.newConditionalFormatRule()
      .whenTextEqualTo("Falta marcación")
      .setBackground("#FF0000") // Rojo
      .setRanges([rangoFinDescanso])
      .build();
     
    // Aplicar todas las reglas
    reglas.push(reglaAtraso1, reglaAtraso2, reglaAlmuerzo, reglaFaltaMarcacion1, reglaFaltaMarcacion2);
    hojaResultados.setConditionalFormatRules(reglas);
   
    // Ajustar ancho de columnas
    hojaResultados.autoResizeColumns(1, nuevosEncabezados.length);
   
    // --------- CREAR HOJA DE RESUMEN ---------
   
    // Obtener nombres únicos de empleados
    const nombresEmpleados = [...new Set(datosReorganizados.map(fila => fila[0]))];
   
    // Configurar la hoja de resumen
    const encabezadosResumen = ["Nombre y Apellido", "Días asistidos", "Calculo minutos (días*8*60*0.8)"];
    hojaResumen.getRange(1, 1, 1, encabezadosResumen.length).setValues([encabezadosResumen]);
    hojaResumen.getRange(1, 1, 1, encabezadosResumen.length).setFontWeight("bold");
   
    // Escribir datos en la hoja de resumen
    for (let i = 0; i < nombresEmpleados.length; i++) {
      const nombreEmpleado = nombresEmpleados[i];
      const fila = i + 2; // Empezar desde la fila 2
     
      // Colocar el nombre del empleado
      hojaResumen.getRange(fila, 1).setValue(nombreEmpleado);
     
      // Fórmula para contar días asistidos
      hojaResumen.getRange(fila, 2).setFormula(
        `=SUMIF('Marcaciones Reorganizadas'!A:A,"${nombreEmpleado}",'Marcaciones Reorganizadas'!K:K)`
      );
     
      // Fórmula para calcular minutos (días*8*60*0.8)
      hojaResumen.getRange(fila, 3).setFormula(`=B${fila}*8*60*0.8`);
    }
   
    // Dar formato a la hoja de resumen
    hojaResumen.autoResizeColumns(1, encabezadosResumen.length);
  }
 
  // Mensaje de confirmación
  SpreadsheetApp.getUi().alert('Proceso completado. Se han creado las hojas "Marcaciones Reorganizadas" y "Resumen de Asistencia".');
}